<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:componentModel="clr-namespace:System.ComponentModel;assembly=PresentationFramework"
                    xmlns:converters1="clr-namespace:SciChart.Wpf.UI.Converters"
                    xmlns:ui="clr-namespace:SciChart.Wpf.UI">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/VS/Colors.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/themes/light.green.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <DropShadowEffect x:Key="BorderGlowEffect" ShadowDepth="0" BlurRadius="4" Color="{DynamicResource AccentColor}" />
    
    <SolidColorBrush x:Key="AccentBrush" Color="{DynamicResource AccentColor}"></SolidColorBrush>

    <converters1:NullToVisibilityConverter x:Key="ifNotNullVisibleConverter" ValueIfNotNull="Visible" ValueIfNull="Collapsed"/>

    <Style TargetType="{x:Type ui:PopupHost}" x:Key="MetroPopupPresenter">
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource AccentBrush}"/>
        <Setter Property="BorderEffect" Value="{StaticResource BorderGlowEffect}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="SurroundSize" Value="0.1*"/>
        <Setter Property="Panel.ZIndex" Value="100"/>
        <Setter Property="FocusManager.IsFocusScope" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Cycle"/>
        <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Cycle"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ui:PopupHost}">
                    <Grid Background="#99000000">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{TemplateBinding SurroundSize}"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="{TemplateBinding SurroundSize}"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="{TemplateBinding SurroundSize}"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="{TemplateBinding SurroundSize}"/>
                        </Grid.RowDefinitions>
                        <Grid Grid.Column="1" Grid.Row="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="True" UseLayoutRounding="True">
                            <Border Background="White" BorderBrush="White" BorderThickness="{TemplateBinding BorderThickness}" Effect="{TemplateBinding BorderEffect}" SnapsToDevicePixels="True"/>
                            <Border Background="{TemplateBinding Background}"
                                  BorderBrush="{TemplateBinding BorderBrush}"
                                  BorderThickness="{TemplateBinding BorderThickness}"
                                  SnapsToDevicePixels="True"
                                  x:Name="ContentSite">
                                <Grid Margin="{TemplateBinding Padding}" >
                                    <ContentPresenter Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Grid>
                                <Border.LayoutTransform>
                                    <ScaleTransform ScaleX="0" ScaleY="0"/>
                                </Border.LayoutTransform>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Animate" Value="True"/>
                                <Condition Property="Visibility" Value="Visible"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="00:00:00.15"  To="1"  Storyboard.TargetName="ContentSite" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleY)"/>
                                        <DoubleAnimation Duration="00:00:00.15"  To="1"  Storyboard.TargetName="ContentSite" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleX)"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="00:00:00.15"  To="0"  Storyboard.TargetName="ContentSite" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleY)"/>
                                        <DoubleAnimation Duration="00:00:00.15"  To="0"  Storyboard.TargetName="ContentSite" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleX)"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="componentModel:DesignerProperties.IsInDesignMode" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="ContentSite"/>
                            <Setter Property="LayoutTransform" TargetName="ContentSite">
                                <Setter.Value>
                                    <ScaleTransform ScaleY="1" ScaleX="1"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="Animate" Value="False">
                            <Setter Property="Visibility" Value="Visible" TargetName="ContentSite"/>
                            <Setter Property="LayoutTransform" TargetName="ContentSite">
                                <Setter.Value>
                                    <ScaleTransform ScaleY="1" ScaleX="1"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ui:PopupHost}" x:Key="FullWidthMetroPopup">
        <Setter Property="Background" Value="{StaticResource AccentBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource AccentBrush}"/>
        <Setter Property="BorderEffect" Value="{StaticResource BorderGlowEffect}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="SurroundSize" Value="0.1*"/>
        <Setter Property="Panel.ZIndex" Value="100"/>
        <Setter Property="FocusManager.IsFocusScope" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Cycle"/>
        <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Cycle"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ui:PopupHost}">
                    <Grid Background="#99000000">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="{TemplateBinding SurroundSize}"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="{TemplateBinding SurroundSize}"/>
                        </Grid.RowDefinitions>
                        <Grid Grid.Row="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="True" UseLayoutRounding="True">                            
                            <Border Background="White"
                                    BorderBrush="White"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Effect="{TemplateBinding BorderEffect}"
                                    SnapsToDevicePixels="True" />
                            <Border Background="{TemplateBinding Background}"
                                  BorderBrush="{TemplateBinding BorderBrush}"
                                  BorderThickness="{TemplateBinding BorderThickness}"
                                  SnapsToDevicePixels="True"
                                  x:Name="ContentSite">
                                <ContentPresenter Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="componentModel:DesignerProperties.IsInDesignMode" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="ContentSite"/>
                        </Trigger>
                        <Trigger Property="Animate" Value="False">
                            <Setter Property="Visibility" Value="Visible" TargetName="ContentSite"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ui:PopupHost}" BasedOn="{StaticResource MetroPopupPresenter}">
    </Style>
</ResourceDictionary>